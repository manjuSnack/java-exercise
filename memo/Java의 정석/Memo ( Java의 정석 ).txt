---

Java의 정석(기초편)

아래 학습한 내용 기술.

---

🍘 #Chapter 1장, 01 자바(Java)란?

🍘 구성
: 실행환경( JRE, Java Run-time Environment ) + 개발도구(JDK, Java Development Kit) + 라이브러리(API, Application Programing Interface)

도구
PC Application
: eclipse, InteliJ

Web Application
: Spring, Spring Boot

빅데이터
: hadoop

게임
: Minecraft

----

🍘 #Chapter 1장, 02 자바의 역사

JDK 1.0 ( 1996 )
J2SE ( 1998 )
: Java2라고도 부른다.

J2SE ( Standard Edition ) : 일반
J2ME ( Micro Edition ) : 소형 기기 ( ATM )
J2EE ( Enterprise Edition ) : 대기업용, 서버용

J2SE 5.0 ( 2004 )
: J2SE 1.5라고도 부른다.

Java SE 8 ( 2014 )

🍘 Applet
: 1996년 1월, Java의 출시 초기에 Web Application으로 사용하다 보안상의 이유로 Servlet과 JSP( Java Server Page)로 사용하게 되었다.

----

🍘 #Chapter 1장, 03 자바의 특징

배우기 쉬운 객체지향 언어
: C++, Java, Python, Javascript가 있다.

자동메모리 관리
: Garbage collector가 자동적으로 메모리를 관리해준다. C++는 개발자가 직접 메모리를 회수해야 Code를 작성해주어야 한다.

Multi-thread를 지원
: 채팅을 하면서 파일을 주고받는 기능 등 여러 기능을 구현하게 해준다.

풍부한 라이브러리로 쉽게 개발 가능

운영체제에 독립적
: Java는 운영체제와는 별개로 프로그램이 실행된다. JVM ( Java Virtual Machine )에 의해 실행한다.

----

🍘 #Chapter 1장, 04 자바 가상 머신 ( JVM, Java Virtual Machine )

: Windows mediaplayer나 Winamp와 같이 Java를 실행하기 위한 가상 기계(소프트웨어)라고 한다.

Byte Code를 기계어로 변화해주는 JIT Compile와 여러 기능으로 Compile 속도의 격차를 많이 줄였다.

참고로, JVM은 종속적이라 OS 별로 실행가는한 JVM이 필요하다.

----

🍘 #Chapter 1장, 05 ~ 06 자바 개발도구(JDK, Java Development Kit) 설치하기, 설정하기

🍘 Java Eclipse 설치
: JDK 11과 eclipse를 받는다. 실제로는 압축하여 USB 등에 옮겨 작업한다.

🍘 환경 변수 설정
시스템 환경 변수 - 시스템 변수 - Path - jdk경로\bin - 확인
: 환경 변수를 맨 위로 올려야 Database 작업 시 충돌 방지

시스템 환경 변수 - 시스템 변수 - 새로 만들기 - JAVA_HOME,
: Tomcat이 JDK가 어디에 있는지 확인하기 위한 변수

Java Install 확인
: cmd ( Command Dos )에서 javac -version으로 java가 잘 설치되었는지 확인할 수 있다. 

🍘 Java Spring 
Tomcat Install 확인 ( Command Line에서 )
: d: , cd D:\Coding\java\apache-tomcat-9.0.70\bin, startup으로 Tomcat이 잘 설치되었는지 확인할 수 있다.
맨 밑에 startup.Catalina.start ... 가 보이면 브라우저에서 localhost:8080을 가면 Tomcat에 대한 정보가 나온다.

: startup은 Server 열기, shutdown은 Server 닫기

STS도 압축만 풀고 내부에 STS를 실행시키면 된다.
: 만약에 실행과정 화면이 정상적으로 보이지 않으면 환경변수에 문제가 있다.

----

🍘 #Chapter 1장, 07 자바 API( Application Programing Interface )

: Package 목록, Class 목록으로 All Class에 대한 내용을 참고할 수 있다.

Java API
: https://www.oracle.com/kr/java/technologies/javase-jdk8-doc-downloads.html 에서 다운로드 받는다.

: 경로\jdk-docs-all\docs\api에서 index.html로 Java API에 대한 내용을 알아볼 수 있다.

INDEX
: Java Class에서 method의 이름만 알고 있을 때 검색해 볼 수 있다.

----

🍘 #Chapter 1장, 08~09 자바 첫 프로그램 작성하기, 자바 프로그램의 실행과정

work 폴더 생성
: 경로\jdk11\에서 work 폴더 생성해 둔다. 이곳에 .java 파일을 저장하는데 꼭 첫 문자는 대문자로 작성한다.

.java 확장자 보이게 하기
: 탐색기 / 파일 / 폴더옵션 / 보기 에서 '알려진 파일 형식의 파일 확장명 숨기기' 해제하고 '모든 폴더에 적용'

🍘 Compile ( javac.exe )

*.java 를 *.class로 기계어로 변환하는 일을 한다.

D:\Coding\java\jdk11\work 경로에서 
: javac 클래스명.java

.java 실행하기
D:\Coding\java\jdk11\work 경로에서 
: java 클래스명로 실행한다.

🍘 type Hello.class와 type Hello.java의 차이
 
: Command Line에서 type Hello.class으로 는 Compile된 기계라 읽기가 어렵지만 type Hello.java는 Code가 적힌 내용을 출력한다.

----

🍘 #Chapter 1장, 10~12 Eclipse 설치하기, Eclipse로 Java 프로그램 개발하기, Eclipse의 View, Perspective, Workspace

🍘 Download할 Eclipse 종류.

Eclipse IDE for Java EE Developers
: Web Application을 만들 때 사용. 현재 이것으로 설치했다.

Eclipse IDE for Java Developers
: 기본적인 Java 기능만을 제공

Eclipse for Android Developes
: Android Studio를 대신 사용한다.

🍘 Eclipse 내부의 View, Perspective, Workspace

하나의 창을 View라 부르고, 구성 화면 전체를 Perspective(관점)라고 부른다.

Workspace
: Eclipse에서 작성한 파일이 저장되는 공간을 Workspace라고 한다. Eclipse가 처음 열릴 때 확인해 볼 수 있다.

🍘 Build 관련 메뉴 설명

: 소스파일(*.java)로부터 프로그램을 만들어 내는 전 과정

Project > Build All

: Workspace의 모든 프로젝트를 빌드

Project > Build Project

: 현재 Project를 Build ( 수동으로 .java를 .class 파일로 Compile 한다. )

Project > Clean

: 이전 Build의 정보를 모두 삭제 ( 모든 소스 파일을 새로 Compile한다. )

Project > Build Automatical

: .java File을 변경하고 매 저장할 때마다 .class를 알아서 생성해준다.

🍘 Navigator

탐색기와 같다. Compile 후 *.class를 확인할 수 있다.

Windows > Show View > Navigator

----

🍘 Ch01. 13~16장, Eclipse의 단축키, Eclipse의 자동완성 기능, Eclipse의 주석(Comment), 자주 발생하는 에러와 해결방법

🍘 Ex1_1 참고

ctrl+shift+L : 단축키 전체 목록보기
ctrl+ '+, -' : Font 크기 증가/감소
ctrl+D : 한줄 삭제
ctrl+alt+down : 행단위 복사

🍘 단축키 재설정 방법
: Windows - Preferences - General - Appearance - Keys - copy line 검색(행단위 복사일 경우) - Binding 에서 단축키 설정 - Apply and Close

alt+shift+A : 멀티컬럼 편집(토글:같은 단축키로 On, Off)
alt+up, down : 선택한 행단위 이동
tab : 들여쓰기
shift+tab : 내어쓰기
ctrl+i : 들여쓰기, 내어쓰기 자동맞춤
ctrl+/ : 주석(토글) 
ctrl+space : 자동완성

🍘 자동완성 재설정 방법
Windows - Preferences - Java - Editor - Templates - sysout(바꾸고 싶은 자동완성 이름 찾아 선택) - Edit - Name 변경(sysout를 sop로 바꿈) - Rename - Apply Close

🍘 자동완성 확장 방법
Windows - Preferences - Java - Editor - Content Assist - Auto Activation treggers for Java에서 . 를 .abcdefghijklmnopqrstuvwxyz로 바꾸고 저장

----

🍘 #Ch01. 17~19장 책의 소스와 강의자료 다운로드, Eclipse 소스파일 가져오기, 내보내기

🍘 소스파일 불러오기
Eclipse 좌측 View에 Package Workspace에서 빈공간 우클릭 import - General - Existing Projects into Workspace - Select root directory로 Directory 찾기, Copy projects into workspace 체크(복사본으로 불러오기)

🍘 소스파일 내보내기
Eclipse 좌측 View에 Package Workspace에서 빈공간 우클릭 export - General - Archive file - Export할 Project 선택, to archive file 경로 선택 

----

🍘 #Chapter 2장. 01~02 화면에 글자 출력하기 - print()와 println(), 덧셈 뺄셈 계산하기

print()
: 줄바꿈하지 않고 출력. Console 창에서 커서가 있는 위치가 print()로 출력할 위치이다.

println()
: 줄바꿈하여 출력

----

🍘 Chapter 2장. 03 변수의 선언과 저장

Ex2_6.java 참고

🍘 변수(variable)란?

: 수학적 개념의 변하는 수가 아닌 하나의 값을 저장할 수 있는 메모리 공간을 뜻한다.
이미 값이 저장된 변수에는 새로운 값을 저장하면 기존의 값은 지워지고 새로 저장된 값만 남는다.

🍘 변수의 선언

변수의 선언 이유
: 값(data)을 저장할 공간을 마련하기 위해서

🍘 변수의 선언 방법

'변수타입 변수이름;' 으로 작성한다. 

예를 들면, int age;
: 정수(Integer) 타입의 변수 age를 선언

🍘 변수에 값 저장하기

변수이름 = 저장할 값;

🍘 변수의 초기화

: 변수에 처음으로 값을 저장하는 것.

🍘 변수의 종류

Class 변수
Instance 변수
Local variable (지역변수)

단, 지역변수(Local variable)의 경우에는 초기화를 꼭 해주어야 한다. 그 외 Class 변수, Instance 변수에 경우에는 초기화하지 않아도 된다.

🍘 변수의 값 읽어오기

초기화 한 후 변수의 이름으로 값을 불러올 수 있다.

----

🍘 #Chapter 2장. 04장 변수의 타입

Ex2_6.java 참고

: 저장할 값의 타입에 의해 결정하며 저장할 값과 일치하는 타입으로 변수를 선언해야 한다.

🍘 값의 타입, 문자와 실수 그리고 논리

🍘 문자(character), 문자열(String)

: char, String

String은 타입이 아니라 Class이다.

🍘 숫자

정수(integer)
: byte, short, int, long

숫자 20억이 넘을때는 long을 사용한다.

실수 (floating-point number)
: float, double

float는 오차없이 7자리수, double은 15자리수이다.

🍘 논리

: Boolean

Boolean은 true와 false의 값을 가지고 있다.

---

🍘 #Chapter 2장. 05장 상수와 리터널

: 상수(Constant)는 한 번만 값을 저장 가능한 변수이며 변수(variable)과는 다르게 이후 변경은 불가능하다. 작성하는 방법은 아래와 같다.

final 변수타입 변수명(대문자) = 초기화할 값;

🍘 리터럴(Literal, 문자 그대로의)

: 상수를 수학적 개념이 아닌 '한 번만 값을 저장하는 변수'라고 의미를 달리 두었기 때문에 Literal을 사용한다.
Literal은 그냥 값을 의미한다.


---

🍘 #Ch.02 - 6장, 리터럴의 타입과 접미사

VarEx3.java 참고

변수에 타입은 저장될 값의 타입(Literal의 타입)에 의해 결정된다.

접미사가 굳이 필요없는 기본형 정수와 실수는 int와 double이다.

정수형에 ob0101에서 ob는 2진수 literal를 뜻한다.
long은 접미사 'l' 혹 'L'을 붙이고 float는 접미사 'f' 혹 'F'를 붙인다. 접두사인 0b(2진수), 0(8진수), 0x(16진수) 또한 대소문자를 구별하지 않는다.

JDK 1.7 이후부터 정수형 literal 사이에 '_'로 구분자를 넣을 수 있다. 

🍘 소수점과 제곱
정수형 literal에 소수점 ' . '을 나타내는 경우 실수형 literal로 바뀐다. 1e3의 경우에는 10의 3승을 뜻하는 literal이다.

🍘 변수와 리터럴의 타입 불일치

범위가 '변수 > 리터럴'인 경우에는 에러가 없다.

int > char
long > int
double > float

그러나 '변수 < 리터럴' 인 경우에는 에러가 발생

int i = 30_0000_0000; 
: int의 범위 20억을 벗어난다.

long < float
float < double

위에 3가지는 에러가 발생

byte, short에 int literal도 저장가능하지만 byte와 short는 literal이 별도로 존재하지 않아 
int 타입의 literal을 사용하지만 byte와 short의 범위를 초과시 에러가 발생 

🍘 #Ch.02 - 7 ~ 8장, 문자, 문자열 리터럴, 문자열 결합

VarEx3.java 참고.

덧셈 연산자(+)는 피연산자가 모두 숫자일 때 두 수를 더하지만 어느 한 쪽이 String인 경우 다른 한쪽을 String으로 변환 후 두 String을 결합한다.

🍘 #Ch.02 - 9장, 두 변수 바꾸기

Ex2_8.java 참고

변수를 하나의 컵이라고 가정하고 우유와 주스를 바꿔 담고자 할 때 빈 컵이 필요할 것이다. 
빈 컵을 이용해 우유와 주스를 바꿔 담을 수 있다. 이처럼 임시로 저장할 변수가 하나 더 필요하다.

🍘 #Ch.02 - 10장, 기본형과 참조형

앞서 Ch.2-4 변수타입 참고.

Java는 C언어와 달리 참조형 변수(Reference Type) 간의 연산을 할 수 없으므로 실제 연산은 기본형(Primitive type)의 변수만으로 계산한다.

🍘 자료형(data type)에는 기본형과 참조형인 2가지가 있다.

🍘 기본형(Primitive type)
: 오직 8개 (논리: boolean / 문자형 : char / 정수형 : byte, short, int, long / 실수형 : float, double)

🍘 참조형(Reference type)
: 기본형을 제외한 나머지로써, String, System 등
참조형은 갯수가 무한대이다. Ch 6장 참고

메모리 주소를 저장(4 byte 또는 8byte)
4 byte의 경우 40억의 변수(40억 byte인 약 4GB)를 사용할 수 있고 32bit JVM은 4byte를 사용한다.
8 byte의 경우 160경(1600만 TB)의 변수를 사용할 수 있고 64bit JVM은 8byte를 사용한다.

---

🍘 #Ch.02 - 11장, 기본형의 종류와 범위

Ex2_6.java 참고

🍘 기본형(Primitive type)의 종류와 크기

논리형, 문자형, 정수형, 실수형이 있다.

boolean은 조건식과 논리적 계산에 사용된다.
char는 유니코드(2byte)를 사용하며 C언어에서는 1byte를 사용한다.
byte는 1byte이며 주로 이진데이터를 다루는데 사용된다.
short는 2byte이며 c언어와의 호환을 위해 추가되었지만 잘 쓰이지 않는다.
int는 4byte로 정수형에서 default이다.
long은 8byte로 int보다 높은 값을 사용할 때 쓰인다.
float는 부동소수점(floating point, 떠다니는 점)이라 불리며 4byte이다.
double은 실수형에서 default이며 float보다 정밀도가 2배이며 8byte이다.

🍘 기본형(Primitve type)의 표현범위

1 bit는 0, 1로만 구성되어 있다.
1 byte는 8bit로 구성되어 있다.

n비트로 표현할 수 있는 값의 개수
: 2의 n승 개

n비트로 표현할 수 있는 부호없는 정수의 범위
: 0 ~ (2의 n승 - 1)

n비트로 표현할 수 있는 부호있는 정수의 범위
: -2의 n-1승 ~ (2의 n-1승 - 1)

byte의 경우에는 0을 포함해야 하기 때문에 부호없는 정수에 경우 0~255(256개)이고, 부호있는 정수에 경우에는 -128 ~ 127(256개)까지이다.

byte는 맨 좌측 bit를 부호비트(sign bit)라고 하며 0 (양수), 1(음수)를 표현하기 위해 쓰이기 때문에 2의 7승인 256개로 값을 표현한다.

short는 2byte로 부호가 있는 정수의 범위로써 -2의 15승 ~ (2의 15승 - 1)으로 -32,768 ~ 32,767의 값이 쓰인다.

char는 2byte로 부호가 없는 정수의 범위로써 0 ~ 65,535의 값이 쓰인다. \u0000 ~ \uffff까지 표현한다.

int는 4byte로 부호가 있는 정수의 범위로써 -2의 31승 ~ (2의 31승 - 1), 2의 31승은 2의 10승을 3번 곱한 뒤 2를 곱한 값을 표현한다.
2E10(2의 10승)은 약 1,024이며 10의 3승이다. 고로 양수만으로 2 x E9 = 약 20억으로 -20억 ~ 20억까지 표현할 수 있다.

long은 8byte로 부호가 있는 정수의 범위로써 -2의 63승 ~ (2의 63승 - 1), 2의 63승은 2의 3승과 2의 60승을 곱한 값으로, 8 x 10의 18승인 800경이다.
고로 -800경 ~ 800경까지를 표현할 수 있다. 

만약, 800경을 넘는 수를 사용할 경우 BigInteger라는 Class를 사용해야 한다. Ch 9장에서 설명한다.

float는 양수만을 표현할 경우 1.4E-45 ~ 3.4E38, 단 -1.4E-45 ~ 1.4E-45는 표현할 수 없는 범위이다.
float는 4byte로 부호(Sign bit) 1개, 지수 8개, 가수 23개(정규화로 24개까지 표현할 수 있다)로 구성되어 있다.  
가수는 3.4를 가리키고 지수는 E38을 가리킨다. 오차 없는 범위는 값을 7자리만을 표현할 수 있다. 
가수의 자리 수 24인 2의 24는 E7(10의 7승)보다 크고 E8(10의 8승)보다 작기 때문에 오차범위는 7자리가 된다.

double은 양수만을 표현할 경우 4.9E-324 ~ 1.8E308, 오차 없는 범위는 15자리이다.
double은 8byte로 부호(Sign bit) 1개, 지수 11개, 가수 52개로 구성되어 있다. 정밀도로 인해 실수에서 double은 default이다.

---

🍘 #Ch.02 - 12~13장, printf를 이용한 출력

PrintEx.java 참고

println()의 단점 
: 출력형식 지정불가

실수의 자리수 조절불가하며 10진수로만 출력이 되는 단점이 있다.
소수점 n자리수를 지정해 출력하거나 8진수, 16진수를 출력하려면 printf() 를 사용하여야 한다.

printf() method는 지시자(specifier)를 통해 선택해 원하는 출력이 가능하다. 지시자의 구성의 갯수에는 한계가 없고 원하는 만큼 표현할 수 있다.

🍘 printf()의 지시자(specifier)를 참고할 Java API

: Class Formatter를 참고하면 지시자(specifier)에 대한 내용을 자세히 알아볼 수 있다.

🍘 printf()의 자주 쓰이는 지시자(specifier) 형식. 

%b : Boolean 형식으로 출력

"%s", Interger.toBinaryString(숫자) : Integer.toBinaryString()는 값을 2진수로 출력

%d : 10진수(decimal) 정수의 형식

%o : 8진수(octal) 정수의 형식

%#o : 8진수(octal) 정수에 접미사 추가해 출력

%x : 16진수(hexa-decimal) 정수의 형식

%#x : 16진수(hexa-decimal) 정수에 접미사 추가해 출력

%f : 부동소수점(floating-point)의 형식

%e : 지수(exponent) 표현식의 형식

%g : 실수를 간략한 형식으로 출력. 기본적으로 글자 7자리만 출력

%c : 문자(character)로 출력

%s : 문자열(String)로 출력

%n : 개행문자(줄바꿈) 실행

[ ] : 중괄호

% 다음에 정수는 전체 자리수를 결정하는 수이고, 소수점 뒤에 숫자를 표기할 경우 소수점 n번째 자리까지 표현하라는 의미이다.

또한 % 뒤에 ' - ' 부호를 넣을 경우 정렬을 반대로 정렬한다. 기본 정렬은 우측정렬이며 ' - ' 부호를 작성할 경우 왼쪽정렬로 출력한다.

% 뒤에 숫자 0을 붙일 경우, 전체자리 중 빈자리에는 숫자 0으로 채운다.
