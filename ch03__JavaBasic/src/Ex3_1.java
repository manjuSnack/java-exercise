/**
 * 
 * @author manjuSnack
 * 
 * 🍘 #Ch03-1~2, 연산자와 피연산자
 * 🍘 #Ch03-3~4, 연산자의 우선순위와 결합규칙
 */
public class Ex3_1 {

	public static void main(String[] args) {
		int x, y;
		
		x = y = 3; // y에 3이 저장된 후에,  x에 3이 저장된다.
		System.out.println("x=" + x);
		System.out.println("y=" + y);
	}

}

/*
🍘 #Ch03-1~2, 연산자와 피연산자

Coding memo ( Java ).txt와 묶어 내용 정리할 때 다시 정리할 것.

연산자
: 연산을 수행하는 기호. + , - , * , / 을 일컫는다. 모든 연산자는 연산결과를 반환한다.

피연산자
: 연산자의 연산 수행 대상이다.

식(expression)인 x + 3에서 연산자는 + 이고, x와 3은 피연산자이다.

🍘 연산자의 종류

🍘 산술연산자 ( 사칙연산과 나머지 연산(%) )
: + - * / % << >>

🍘 비교연산자 ( 크고 작음과 같고 다름을 비교 )
: > < >= <= == !=

🍘 논리연산자 ( AND, OR, NOT 등과 비트연산자(bit operator) 포함 )
: && || ! & | ^ ~

🍘 비트 연산자 ( bit operator )
a & b
: AND 연산. 두 bit가 모두 1이면 1, 아니면 0

a | b
: OR 연산. 두 bit가 모두 0이면 0, 아니면 1

a ^ b
: XOR 연산. 두 bit가 다르면 1, 같으면 0

~ a
: NOT 연산. 1을 0으로, 0을 1로 변환

🍘 비트 연산 활용 사례

byte flag; 
: 8개의 각 bit는 8개의 냉장고 센서(true, false) 값을 가리킨다고 하자.

( flag & 0b00001000 == 0) ? System.out.print("온도는 0도 이하"); : System.out.print("온도는 0도 이상");
: 온도는 0도 이상
만약, bit 3번째 센서 값이 0이면 "온도는 0도 이하"가 되니 온도 측정하는 곳에서 활용되는 사례의 예이다.

🍘 대입연산자
: =
우변의 값을 좌변에 저장

🍘 기타 
: (type) ?: instanceof. 형변환 연산자, 삼항연산자, instanceof연산자

(type) : 형변환을 의미하며
?: 는 삼항연산자라는 조건문을 뜻한다. 조건연산자.
instanceof : 객체지향에서 쓰인다.

---

🍘 #Ch03-3~4, 연산자의 우선순위와 결합규칙

🍘 연산자의 우선순위
: 하나의 식(expression)에 연산자가 둘 이상 있을 때, 어떤 연산을 먼저 수행할지를 자동 결정하는 것. ( )에 경우 수동으로 먼저 수행한다.

단항연산자인 양수, 음수를 표현하는 +, - 연산자가 이항 연산자인 + - * /인 사칙연산보다 우선순위가 높다.
곱셈과 나눗셈이 덧셈보다 우선순위가 높다.
산술연산자가 비교연산자보다 우선순위가 높다.
비교연산자가 논리연산자보다 우선순위가 높다
대입연산자는 우선순위가 가장 낮다.

산술 > 비교 > 논리 > 대입순으로 우선순위가 높고 낮다.
단항(피연산자가 1개) > 이항(산술) > 삼항(조건)로 우선순위가 높고 낮다.

🍘 연산자의 결합규칙

대입( = )연산자와 단항(+ -로 양수, 음수인 부호 표현)연산자를 제외하고는 왼쪽에서 오른쪽으로 연산하며, 대입과 단항연산은 우측에서 왼쪽으로 연산한다.
*/